// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/scooter.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"

	v5 "github.com/golang-jwt/jwt/v5"
	entity "github.com/integer00/e-scooter/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// BookScooter mocks base method.
func (m *MockUseCase) BookScooter(scooterId, userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BookScooter", scooterId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// BookScooter indicates an expected call of BookScooter.
func (mr *MockUseCaseMockRecorder) BookScooter(scooterId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookScooter", reflect.TypeOf((*MockUseCase)(nil).BookScooter), scooterId, userId)
}

// GetEndpoints mocks base method.
func (m *MockUseCase) GetEndpoints() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndpoints")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetEndpoints indicates an expected call of GetEndpoints.
func (mr *MockUseCaseMockRecorder) GetEndpoints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpoints", reflect.TypeOf((*MockUseCase)(nil).GetEndpoints))
}

// GetScooter mocks base method.
func (m *MockUseCase) GetScooter(s string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScooter", s)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetScooter indicates an expected call of GetScooter.
func (mr *MockUseCaseMockRecorder) GetScooter(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScooter", reflect.TypeOf((*MockUseCase)(nil).GetScooter), s)
}

// RegisterScooter mocks base method.
func (m *MockUseCase) RegisterScooter(s *entity.Scooter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterScooter", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterScooter indicates an expected call of RegisterScooter.
func (mr *MockUseCaseMockRecorder) RegisterScooter(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterScooter", reflect.TypeOf((*MockUseCase)(nil).RegisterScooter), s)
}

// RideHistory mocks base method.
func (m *MockUseCase) RideHistory(userId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RideHistory", userId)
}

// RideHistory indicates an expected call of RideHistory.
func (mr *MockUseCaseMockRecorder) RideHistory(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RideHistory", reflect.TypeOf((*MockUseCase)(nil).RideHistory), userId)
}

// StartScooter mocks base method.
func (m *MockUseCase) StartScooter(scooterId, userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartScooter", scooterId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartScooter indicates an expected call of StartScooter.
func (mr *MockUseCaseMockRecorder) StartScooter(scooterId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartScooter", reflect.TypeOf((*MockUseCase)(nil).StartScooter), scooterId, userId)
}

// StopScooter mocks base method.
func (m *MockUseCase) StopScooter(scooterId, userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopScooter", scooterId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopScooter indicates an expected call of StopScooter.
func (mr *MockUseCaseMockRecorder) StopScooter(scooterId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopScooter", reflect.TypeOf((*MockUseCase)(nil).StopScooter), scooterId, userId)
}

// UserLogin mocks base method.
func (m *MockUseCase) UserLogin(s string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogin", s)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockUseCaseMockRecorder) UserLogin(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockUseCase)(nil).UserLogin), s)
}

// ValidateJWT mocks base method.
func (m *MockUseCase) ValidateJWT(s string) (v5.MapClaims, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateJWT", s)
	ret0, _ := ret[0].(v5.MapClaims)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ValidateJWT indicates an expected call of ValidateJWT.
func (mr *MockUseCaseMockRecorder) ValidateJWT(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateJWT", reflect.TypeOf((*MockUseCase)(nil).ValidateJWT), s)
}
